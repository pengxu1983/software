#!/home/benpeng/nbifweb_client/software/node/bin/node
let querystring     = require('querystring');
let http            = require('http');
let process = require('process');
let fs = require('fs');
console.log(process.argv);
let str = '{';
for (let i=3;i<process.argv.length;i++){
  str += process.argv[i];
  str += ',';
}
str += '}';

let lines = fs.readFileSync('./NBIF_TREE_INFO','utf8').split('\n');
lines.pop();
let regx01  = /(\w+):::(\S+)/;
let projectname;
let shelve;
let kickoffdate;
let variantname;
let isBAPU;
let codeline;
let branch_name;
let changelist;
let testname = process.argv[2];
for(let l=0;l<lines.length;l++){
  lines[l].replace(regx01,function(rs,$1,$2){
    console.log($1,$2);
    if($1 == 'projectname'){
      projectname = $2;
    }
    if($1 == 'shelve'){
      shelve  = $2;
    }
    if($1 == 'kickoffdate'){
      kickoffdate = $2;
    }
    if($1 == 'variantname'){
      variantname = $2;
    }
    if($1 == 'isBAPU'){
      isBAPU  = $2;
    }
  });
}
lines = fs.readFileSync('./configuration_id','utf8').split('\n');
regx01  =/(\w+)\/(\w+)@(\w+)/;
lines.pop();
lines[0].replace(regx01,function(rs,$1,$2,$3){
  codeline  = $1;
  branch_name = $2;
  changelist  = $3;
});
let outdir  = process.argv[3];
let result  = '';
let signature = 'NA';
if(fs.existsSync(outdir+'/REGRESS_PASS')){
  result  = 'PASS';
}
else{
  result  = 'RUNNING';
  let regx02 = /SvtTestEpilog: (\w+)/;
  if(fs.existsSync(outdir+'/vcs_run.log')){
    lines = fs.readFileSync(outdir+'/vcs_run.log','utf8').split('\n');
    lines.pop();
    for(let l=0;l<lines.length;l++){
      if(lines[l].test(regx02)){
        lines[l].replace(regx02,function(rs,$1){
          if($1  == 'Passed'){
            result  = "PASS";
          }
          else if($1  == 'Failed'){
            result  = 'FAIL';
          }
        });
      }
    }
    if(result ==  'FAIL'){
      let regx03  = /^(error.*)/i;
      let regx04  = /^(UVM_ERROR.*)/;
      let regx05  = /^(UVM_FATAL.*)/;
      for(let l=0;l<lines.length;l++){
        if(lines[0].test(regx03)){
          lines[0].replace(regx03,function(rs,$1){
            signature = $1;
            break;
          });
        }
        if(lines[0].test(regx04)){
          lines[0].replace(regx04,function(rs,$1){
            signature = $1;
            break;
          });
        }
        if(lines[0].test(regx05)){
          lines[0].replace(regx05,function(rs,$1){
            signature = $1;
            break;
          });
        }

      }
    }
  }
}
let onecase = {
  projectname : projectname,
  variantname : variantname,
  codeline  : codeline,
  branch_name : branch_name,
  changelist  : changelist,
  kickoffdate : kickoffdate,
  isBAPU      : isBAPU,
  shelve      : shelve,
  testname    : testname,
  result      : result,
  signature   : signature
};
console.log(onecase);
//fs.writeFileSync('endlog',JSON.stringify(onecase),{
//  encoding  : 'utf8',
//  mode      : '0600',
//  flag      : 'w'
//});
//let fs              = require('fs');
//let child_process   = require('child_process');
//let cronJob         = require("cron").CronJob;
const postData = querystring.stringify(onecase);

const options = {
  hostname: 'ltipc969',
  port: 9001,
  path: '/try/onecaseend',
  method: 'POST',
  headers: {
    'Content-Type': 'application/x-www-form-urlencoded',
    'Content-Length': Buffer.byteLength(postData)
  }
};

const req = http.request(options, (res) => {
  console.log(`STATUS: ${res.statusCode}`);
  console.log(`HEADERS: ${JSON.stringify(res.headers)}`);
  res.setEncoding('utf8');
  res.on('data', (chunk) => {
    console.log(`BODY: ${chunk}`);
  });
  res.on('end', () => {
    console.log('No more data in response.');
  });
});

req.on('error', (e) => {
  console.error(`problem with request: ${e.message}`);
});

// Write data to request body
req.write(postData);
req.end();
