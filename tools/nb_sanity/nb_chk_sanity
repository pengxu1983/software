#!/home/benpeng/nbifweb_client/software/node/bin/node
let querystring     = require('querystring');
let http            = require('http');
let process         = require('process');
let fs              = require('fs');
let child_process   = require('child_process');
let path;
let site;
let server  = {};
server['srdc']  = 'srdcws808';
server['atl']   = 'atletx7-neu001';
let testlist  =[];

const { program }   = require('commander');
program
 .option('-t, --testlist <type>', 'testlist')
 .option('-s, --shelve <type>', 'shelve id')
 .option('-c, --codeline <type>', 'codeline')
 .option('-u, --username <type>', 'username')
 .option('-b, --branch_name <type>', 'branch_name')
 .option('-l, --changelist <type>', 'changelist')
 .option('-r, --treeRoot <type>', 'treeRoot')
 .option('-h, --hostname <type>', 'hostname')
 .option('-k, --kill <type>', 'kill')
 .option('-d, --describe <type>', 'describe string')
 .option('-cid, --configuration_id <type>', 'configuration_id')
 .option('-man, --manual', 'manual');
program.parse(process.argv);
if(program.manual){
  console.log('Manual of nbi_chk_sanity');
  console.log('Souce code of this script is /home/benpeng/nbifweb_client/software/tools/nb_sanity/nb_chk_sanity');
  console.log('Usage of this script is: ');
  console.log('nb_chk_sanity -[option1] [value1] -[option2] [value2] ...');
  console.log(' options:');
  console.log('   -s,--shelve <shelve number> :');
  console.log('     | shelve number should be a valid perforce shelve number.');
  console.log('     | currently, script will not check its validity');
  console.log('     | this is highly recommended to run after bootenv.');
  console.log('     | eg : nb_chk_sanity -s 12345678');
  console.log('   -d,--describe:');
  console.log('     | identical name of a shelve. especially useful when you wish to kick off mutiple check with same shelve id');
  console.log('     | eg : nb_chk_sanity -s 12345678 -d abc');
  console.log('     |      nb_chk_sanity -s 12345678 -d def');
  console.log('     |      after typing these two command, two sanity check will be kicked off with different ID names. Their result won\'t affect each other ');
  console.log('   -man,--manual:');
  console.log('     | display this manual');
  return;
}
let shelve;
if(program.kill){
  path  = '/sanity/kill';
  shelve= program.kill;
}
else if(program.shelve){
  path  = '/clientrun';
  shelve= program.shelve;
}
if(program.testlist)  {
  console.log(program.testlist);
  testlist  = program.testlist.split(',');
}
let regx01;
//To get username
let username;
if(program.username){
  username  = program.username;
}
else{
  username  = child_process.execSync('whoami',{
    encoding  : 'utf8'
  });
  regx01  = /^(\w+)/;
  username.replace(regx01,function(rs,$1){
    console.log('username :'+$1);
    username  = $1;
  });
}
//To get hostname
let hostname;
if(program.hostname){
  hostname  = program.hostname;
}
else{
  hostname = child_process.execSync('hostname',{
    encoding  : 'utf8'
  });
  regx01  = /^(\w+)/;
  hostname.replace(regx01,function(rs,$1){
    console.log('hostname :'+$1);
    hostname  = $1;
    let regx02  = /srdc/;
    let regx03  = /atl/;
    if(regx02.test(hostname)){
      site  = 'srdc';
    }
    if(regx03.test(hostname)){
      site  = 'atl'
    }
    console.log('site :'+site);
  });
}
//To get treeRoot
let treeRoot;
if(program.treeRoot){
  treeRoot  = program.treeRoot;
}
else{
  treeRoot = child_process.execSync('pwd',{
    encoding  : 'utf8'
  });
  regx01  = /^(\S+)/;
  treeRoot.replace(regx01,function(rs,$1){
    console.log('treeRoot :'+$1);
    treeRoot  = $1;
  });
}

let describe;
if(program.describe){
  describe  = program.describe;
}
else{
  describe  = 'default'
}
//To get codeline branch_name
let codeline;
let branch_name;
let changelist;
if(!fs.existsSync(treeRoot+'/configuration_id')){
  throw "need correct treeRoot setting";
}
let lines = fs.readFileSync(treeRoot+'/configuration_id','utf8').split('\n');
lines.pop();
regx01  =/(\w+)\/(\w+)@(\w+)/;
lines[0].replace(regx01,function(rs,$1,$2,$3){
  codeline  = $1;
  branch_name = $2;
  changelist  = $3;
  if(program.codeline){
    codeline  = program.codeline;
  }
  if(program.branch_name){
    branch_name = program.branch_name;
  }
});
console.log('input testlist :'+JSON.stringify(testlist));

child_process.exec('cd '+treeRoot+' && /tool/pandora64/bin/p4 describe -s '+shelve,function(err,stdout,stderr){
  if(stderr){
    console.log(stderr);
  }
  else{
    //get changelist
    child_process.exec('cd '+treeRoot+' && /tool/pandora64/bin/p4 changes -m1 ...#head',function(err_cl,stdout_cl,stderr_cl){
      if(err_cl){
        console.log(err_cl);
      }
      else if(stderr_cl){
        console.log(stderr_cl)
      }
      else{
        let regx  = /^Change (\d+)/;
        if(program.changelist){
          changelist  = program.changelist;
        }
        else{
          stdout_cl.replace(regx,function(rs,$1){
            changelist  = $1;
            console.log('picking up changelist : '+changelist);
          });
        }
        let postData = querystring.stringify({
          'treeRoot'  : treeRoot,
          'username'  : username,
          'hostname'  : hostname,
          'shelve'    : shelve,
          'codeline'  : codeline,
          'branch_name': branch_name,
          'changelist': changelist,
          'testlist'  : JSON.stringify(testlist),
          'describe': describe
        });
        
        
        let options = {
          hostname: server[site],
          port: 9010,
          path: path,
          method: 'POST',
          headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'Content-Length': Buffer.byteLength(postData)
          }
        };
        
        let body  ='';
        
        let req = http.request(options, (res) => {
          //console.log(`STATUS: ${res.statusCode}`);
          //console.log(`HEADERS: ${JSON.stringify(res.headers)}`);
          res.setEncoding('utf8');
          res.on('data', (chunk) => {
            //console.log(`BODY: ${chunk}`);
            body  += chunk;
          });
          res.on('end', () => {
            let R = JSON.parse(body);
            console.log(R.msg);
          });
        });
        
        req.on('error', (e) => {
          console.error(`problem with request: ${e.message}`);
        });
        
        // Write data to request body
        req.write(postData);
        req.end();
      }
    });
    
  }
});


