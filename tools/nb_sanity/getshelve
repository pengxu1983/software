#!/home/benpeng/nbifweb_client/software/node/bin/node
var mysql           = require('mysql');
let querystring     = require('querystring');
let http            = require('http');
var moment          = require('moment');
let process         = require('process');
let cronJob         = require("cron").CronJob;
let child_process   = require('child_process');
let fs              = require('fs');
//var connection = mysql.createConnection({
//  host     : 'atlvmysqldp19.amd.com',
//  user     : 'nbif_ad',
//  password : 'WqyaSp90*',
//  database : 'nbif_management_db'
//});
//connection.connect(function(err){
//  if(err) throw err;
//  cron_check.start();
//});
let checkifalldone  = function(path){
  child_process.exec('ls '+path+'/result.* -d',function(err,stdout,stderr){
    console.log(stdout);
    let lines = stdout.split('\n');
    lines.pop();
    console.log('result files');
    console.log(lines.length);
  });
}

let sql ;
let cron_check = new cronJob('*/5 * * * * *',function(){
  console.log(moment().format('YYYYMMDDHHmmss'));
  let connection = mysql.createConnection({
    host     : 'atlvmysqldp19.amd.com',
    user     : 'nbif_ad',
    password : 'WqyaSp90*',
    database : 'nbif_management_db'
  });
  connection.connect(function(err){
    if(err) throw err;
  });
  //find
  sql = 'select * from sanityshelves where ';
  sql += 'result="NOTSTARTED"';
  connection.query(sql,function(err1,result1){
    if(err1) throw err1;
    //console.log(result1);
    if(result1.length == 0){
    }
    else{
      console.log(result1[0]);
      let workspace = '/proj/cip_nbif_de_2/sanitycheck/'+result1[0].codeline+'.'+result1[0].branch_name+'.'+result1[0].username+'.'+result1[0].shelve;
      let variants  = ['nbif_nv10_gpu','nbif_draco_gpu','nbif_et_0','nbif_et_1','nbif_et_2'];
      let resultnumber = variants.length+JSON.parse(result1[0].testlist).length * variants.length;
      console.log('resultnumber is '+resultnumber);
      let text="";
      if(fs.existsSync(workspace)){
        console.log(workspace+'.remove cleaning...');
        child_process.execSync('mv '+workspace+' '+workspace+'.remove');
        child_process.exec('rm -rf '+workspace+'.remove',function(err1,stdout1,stderr1){
          console.log(workspace+'.remove clean done');
        });
      }
      let djregxfail  = /dj exited with errors/;
      let djregxpass  = /dj exited successfully/;
      ////////////////////
      //dcelab
      ////////////////////
      for(let v=0;v<variants.length;v++){
        let dcelabRoot  = workspace+'/'+variants[v]+'.dcelab';
        if(fs.existsSync(dcelabRoot)){
          console.log(variants[v]+' dcelab cleaning...');
          child_process.execSync('rm -rf '+dcelabRoot+'.*.script');
          child_process.execSync('mv '+dcelabRoot+' '+dcelabRoot+'.remove');
          child_process.exec('bsub -P bif-shub1 -q normal -Is -J nbif_sanity -R "rusage[mem=4000] select[type==RHEL7_64]" rm -rf '+dcelabRoot+'.remove',function(err1,stdout1,stderr1){
            console.log(variants[v]+' dcelab clean done');
          });
        }
        child_process.execSync('mkdir -p '+dcelabRoot);
        console.log(dcelabRoot+ ' created');
        //sync script and shelve
        text ='';
        text += '#!/tool/pandora64/bin/tcsh\n';
        text += 'source /proj/verif_release_ro/cbwa_initscript/current/cbwa_init.csh\n';
        text += 'cd '+dcelabRoot+'\n';
        text += '/home/benpeng/nbifweb_client/software/tools/rtlogin\n';
        text += 'p4_mkwa -codeline '+result1[0].codeline+' -branch_name '+result1[0].branch_name+'\n';
        text += 'p4 unshelve -s '+result1[0].shelve+'\n';
        fs.writeFileSync(dcelabRoot+'.sync.script',text,{
          encoding  : 'utf8',
          mode      : '0700',
          flag      : 'w'
        });
        //run script
        text ='';
        text += '#!/tool/pandora64/bin/tcsh\n';
        text += 'source /proj/verif_release_ro/cbwa_initscript/current/cbwa_init.csh\n';
        text += 'cd '+dcelabRoot+'\n';
        text += '/home/benpeng/nbifweb_client/software/tools/rtlogin\n';
        text += 'rt_login\n';
        text += 'bootenv -v '+variants[v]+'\n';
        if(variants[v]  ==  'nbif_draco_gpu'){
          text += "dj -l "+dcelabRoot+"/dcelab.log"+" -e 'releaseflow::dropflow(:rtl_drop).build(:rhea_drop,:rhea_dc)' -DPUBLISH_BLKS=nbif_shub_wrap_algfx\n";
        }
        else{
          text += "dj -l "+dcelabRoot+"/dcelab.log"+" -e 'releaseflow::dropflow(:rtl_drop).build(:rhea_drop,:rhea_dc)' -DPUBLISH_BLKS=nbif_shub_wrap_gfx\n";
        }
        fs.writeFileSync(dcelabRoot+'.run.script',text,{
          encoding  : 'utf8',
          mode      : '0700',
          flag      : 'w'
        });
        child_process.exec('bsub -P bif-shub1 -q normal -Is -J nbif_sanity -R "rusage[mem=40000] select[type==RHEL7_64]" '+dcelabRoot+'.sync.script',function(err0,stdout0,stderr0){
          if(err0){
            console.log(err0);
          }
          console.log(variants[v]+' dcelab sync done');
          child_process.exec('bsub -P bif-shub1 -q normal -Is -J nbif_sanity -R "rusage[mem=40000] select[type==RHEL7_64]" '+dcelabRoot+'.run.script',function(err1,stdout1,stderr1){
            if(err1) {
              console.log(err1);
            }
            console.log(variants[v]+' dcelab run done');
            let dcelablog = fs.readFileSync(dcelabRoot+'/dcelab.log','utf8').split('\n');
            dcelablog.pop();
            for(let l =0;l<dcelablog.length;l++){
              if(djregxpass.test(dcelablog[l])){
                console.log(variants[v]+' dcelab PASS');
                fs.writeFileSync(workspace+'/result.'+variants[v]+'.dcelab.RUNPASS','',{
                  encoding  : 'utf8',
                  mode      : '0600',
                  flag      : 'w'
                });
                checkifalldone(workspace);
                break;
              }
              if(djregxfail.test(dcelablog[l])){
                console.log(variants[v]+' dcelab FAIL');
                fs.writeFileSync(workspace+'/result.'+variants[v]+'.dcelab.RUNFAIL','',{
                  encoding  : 'utf8',
                  mode      : '0600',
                  flag      : 'w'
                });
                checkifalldone(workspace);
                break;
              }
            }
            if(fs.existsSync(workspace+'/result.'+variants[v]+'.dcelab.RUNFAIL')){
            }
            else if(fs.existsSync(workspace+'/result.'+variants[v]+'.dcelab.RUNPASS')){
            }
            else{
              console.log(variants[v]+' dcelab UNKNOWN');
              fs.writeFileSync(workspace+'/result.'+variants[v]+'.dcelab.RUNUNKNOWN','',{
                encoding  : 'utf8',
                mode      : '0600',
                flag      : 'w'
              });
              checkifalldone(workspace);
            }
          });
        });
      }
      ////////////////////
      //tests
      ////////////////////
      for(let v=0;v<variants.length;v++){
        let treeRoot  = workspace+'/'+variants[v];
        if(fs.existsSync(treeRoot)){
          console.log(variants[v]+' cleaning...');
          child_process.execSync('rm -rf '+treeRoot+'.*.script');
          child_process.execSync('mv '+treeRoot+' '+treeRoot+'.remove');
          child_process.exec('bsub -P bif-shub1 -q normal -Is -J nbif_sanity -R "rusage[mem=4000] select[type==RHEL7_64]" rm -rf '+treeRoot+'.remove',function(err1,stdout1,stderr1){
            console.log(variants[v]+' clean done');
          });
        }
        child_process.execSync('mkdir -p '+treeRoot);
        console.log(treeRoot + ' created');
        //sync script and shelve
        text ='';
        text += '#!/tool/pandora64/bin/tcsh\n';
        text += 'source /proj/verif_release_ro/cbwa_initscript/current/cbwa_init.csh\n';
        text += 'cd '+treeRoot+'\n';
        text += '/home/benpeng/nbifweb_client/software/tools/rtlogin\n';
        text += 'p4_mkwa -codeline '+result1[0].codeline+' -branch_name '+result1[0].branch_name+'\n';
        text += 'p4 unshelve -s '+result1[0].shelve+'\n';
        fs.writeFileSync(treeRoot+'.sync.script',text,{
          encoding  : 'utf8',
          mode      : '0700',
          flag      : 'w'
        });
        //build script
        text ='';
        text += '#!/tool/pandora64/bin/tcsh\n';
        text += 'source /proj/verif_release_ro/cbwa_initscript/current/cbwa_init.csh\n';
        text += 'cd '+treeRoot+'\n';
        text += 'rt_login\n';
        text += 'bootenv -v '+variants[v]+'\n';
        text += 'dj -l build.log -DUVM_VERBOSITY=UVM_LOW -m4 -DUSE_VRQ -DCGM -DSEED=12345678 run_test -s nbiftdl demo_test_0_nbif_all_rtl -a execute=off\n';
        fs.writeFileSync(treeRoot+'.build.script',text,{
          encoding  : 'utf8',
          mode      : '0700',
          flag      : 'w'
        });
        //run script
        for(let t=0;t<JSON.parse(result1[0].testlist).length;t++){
          text = '';
          text += '#!/tool/pandora64/bin/tcsh\n';
          text += 'source /proj/verif_release_ro/cbwa_initscript/current/cbwa_init.csh\n';
          text += 'cd '+treeRoot+'\n';
          text += 'rt_login\n';
          text += 'bootenv -v '+variants[v]+'\n';
          text += 'dj -l '+treeRoot+'/'+JSON.parse(result1[0].testlist)[t]+'.log -DUVM_VERBOSITY=UVM_LOW -m4 -DUSE_VRQ -DCGM -DSEED=12345678 run_test -s nbiftdl '+JSON.parse(result1[0].testlist)[t]+'_nbif_all_rtl -a run=only\n';
          fs.writeFileSync(treeRoot+'.run.'+JSON.parse(result1[0].testlist)[t]+'.script',text,{
            encoding  : 'utf8',
            mode      : '0700',
            flag      : 'w'
          });
        }
        child_process.exec('bsub -P bif-shub1 -q normal -Is -J nbif_sanity -R "rusage[mem=2000] select[type==RHEL7_64]" '+treeRoot+'.sync.script',{
          maxBuffer : 1024*1024*1024
        },function(err,stdout,stderr){
          if(err){
            console.log(err);
            //throw err;
          }
          console.log(variants[v] +' sync done');
          child_process.exec('bsub -P bif-shub1 -q normal -Is -J nbif_sanity -R "rusage[mem=5000] select[type==RHEL7_64]" '+treeRoot+'.build.script',{
            maxBuffer : 1024*1024*1024
          },function(err,stdout,stderr){
            if(err) {
              console.log(err);
              //throw err;
            }
            console.log(variants[v]+' build done');
            //check if build pass
            if(!fs.existsSync(treeRoot+'/build.log')){
              console.log(variants[v]+' build err');
            }
            else{
              let lines = fs.readFileSync(treeRoot+'/build.log','utf8').split('\n');
              lines.pop();
              let regxfail  = /dj exited with errors/;
              let regxpass  = /dj exited successfully/;
              for(let l=0;l<lines.length;l++){
                if(regxpass.test(lines[l])){
                  //build pass
                  fs.writeFileSync(workspace+'/'+variants[v]+'.BUILDPASS','',{
                    encoding  : 'utf8',
                    mode      : '0600',
                    flag      : 'w'
                  });
                  //To Run cases
                  for(let t=0;t<JSON.parse(result1[0].testlist).length;t++){
                    text = '';
                    text += '#!/tool/pandora64/bin/tcsh\n';
                    text += 'source /proj/verif_release_ro/cbwa_initscript/current/cbwa_init.csh\n';
                    text += 'cd '+treeRoot+'\n';
                    text += 'rt_login\n';
                    text += 'bootenv -v '+variants[v]+'\n';
                    text += 'dj -l '+treeRoot+'/'+JSON.parse(result1[0].testlist)[t]+'.log -DUVM_VERBOSITY=UVM_LOW -m4 -DUSE_VRQ -DCGM -DSEED=12345678 run_test -s nbiftdl '+JSON.parse(result1[0].testlist)[t]+'_nbif_all_rtl -a run=only\n';
                    fs.writeFileSync(treeRoot+'.run.'+JSON.parse(result1[0].testlist)[t]+'.script',text,{
                      encoding  : 'utf8',
                      mode      : '0700',
                      flag      : 'w'
                    });
                    child_process.exec('bsub -P bif-shub1 -q normal -Is -J nbif_sanity -R "rusage[mem=10000] select[type==RHEL7_64]" '+treeRoot+'.run.'+JSON.parse(result1[0].testlist)[t]+'.script',{
                      maxBuffer : 1024*1024*1024
                    },function(err2,stdout2,stderr2){
                      if(err2){
                        console.log(err2);
                      }
                      console.log(variants[v]+' '+JSON.parse(result1[0].testlist)[t]+' run done');
                      let testlog = fs.readFileSync(treeRoot+'/'+JSON.parse(result1[0].testlist)[t]+'.log','utf8').split('\n');
                      testlog.pop();
                      for(let l=0;l<testlog.length;l++){
                        if(regxpass.test(testlog[l])){
                          console.log(variants[v]+' '+JSON.parse(result1[0].testlist)[t]+' pass');
                          fs.writeFileSync(workspace+'/result.'+variants[v]+'.'+JSON.parse(result1[0].testlist)[t]+'.RUNPASS','',{
                            encoding  : 'utf8',
                            mode      : '0600',
                            flag      : 'w'
                          });
                          checkifalldone(workspace);
                          break;
                        }
                        else if(regxfail.test(testlog[l])){
                          console.log(variants[v]+' '+JSON.parse(result1[0].testlist)[t]+' fail');
                          fs.writeFileSync(workspace+'/result.'+variants[v]+'.'+JSON.parse(result1[0].testlist)[t]+'.RUNFAIL','',{
                            encoding  : 'utf8',
                            mode      : '0600',
                            flag      : 'w'
                          });
                          checkifalldone(workspace);
                          break;
                        }
                      }
                      if(fs.existsSync(workspace+'/result.'+variants[v]+'.'+JSON.parse(result1[0].testlist)[t]+'.RUNFAIL')){
                      }
                      else if(fs.existsSync(workspace+'/result.'+variants[v]+'.'+JSON.parse(result1[0].testlist)[t]+'.RUNPASS')){
                      }
                      else{
                        fs.writeFileSync(workspace+'/result.'+variants[v]+'.'+JSON.parse(result1[0].testlist)[t]+'.RUNUNKNOWN','',{
                          encoding  : 'utf8',
                          mode      : '0600',
                          flag      : 'w'
                        });
                        checkifalldone(workspace);
                      }
                    });
                  }
                  break;
                }
                if(regxfail.test(lines[l])){
                  //build fail
                  fs.writeFileSync(workspace+'/'+variants[v]+'.BUILDFAIL','',{
                    encoding  : 'utf8',
                    mode      : '0600',
                    flag      : 'w'
                  });
                  //cases will all fail due to this failure
                  for(let t=0;t<JSON.parse(result1[0].testlist).length;t++){
                    text = '';
                    text += '#!/tool/pandora64/bin/tcsh\n';
                    text += 'source /proj/verif_release_ro/cbwa_initscript/current/cbwa_init.csh\n';
                    text += 'cd '+treeRoot+'\n';
                    text += 'rt_login\n';
                    text += 'bootenv -v '+variants[v]+'\n';
                    text += 'dj -l '+treeRoot+'/'+JSON.parse(result1[0].testlist)[t]+'.log -DUVM_VERBOSITY=UVM_LOW -m4 -DUSE_VRQ -DCGM -DSEED=12345678 run_test -s nbiftdl '+JSON.parse(result1[0].testlist)[t]+'_nbif_all_rtl -a run=only\n';
                    fs.writeFileSync(treeRoot+'.run.'+JSON.parse(result1[0].testlist)[t]+'.script',text,{
                      encoding  : 'utf8',
                      mode      : '0700',
                      flag      : 'w'
                    });
                    fs.writeFileSync(workspace+'/result.'+variants[v]+'.'+JSON.parse(result1[0].testlist)[t]+'.BUILDFAIL','',{
                      encoding  : 'utf8',
                      mode      : '0600',
                      flag      : 'w'
                    });  
                    checkifalldone(workspace);
                  }
                  break;
                }
              }
            }
          });
        });
        cron_check.stop();
      }
    }
  });
  connection.end();
},null,true,'Asia/Chongqing');


